pipeline {
    agent any
    environment {
        
        //environment variables
        REGISTRY_URI = 'us.gcr.io'
        PROJECT_ID = 'airqo-250220'
        IMAGE_NAME_PROD = 'airqo-test-api'
        IMAGE_NAME_STAGE = 'airqo-stage-test-api'
        K8S_CONFIG = 'airqo-k8s-config'
        K8S_URL = 'https://34.78.78.202:6443'
        }
    stages {
        stage("Start"){
            steps {
                slackSend (color: '#1976d2', message: "BUILD STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
        }
        stage("Checkout code") {
            steps {
                checkout scm
            }
        }
        stage("Build"){
                 steps {

                    echo "Docker Build"
                    sh """
                    docker build -t ${REGISTRY_URI}/${PROJECT_ID}/${IMAGE_NAME_STAGE}:"latest" -f "devops/microservice-1/Dockerfile" . 
                    """
                    withCredentials([file(credentialsId: 'airqo-gcr', variable: 'GC_KEY')]){
                        sh "cat '$GC_KEY' | docker login -u _json_key --password-stdin ${REGISTRY_URI}"
                        sh "gcloud auth activate-service-account --key-file='$GC_KEY'"
                        sh "gcloud auth configure-docker"
                        /* GLOUD_AUTH = sh (
                                script: 'gcloud auth print-access-token',
                                returnStdout: true
                            ).trim()
                        */
                        echo "Pushing image To GCR"
                        sh """
                        gcloud container images add-tag ${REGISTRY_URI}/${PROJECT_ID}/${IMAGE_NAME_STAGE} ${REGISTRY_URI}/${PROJECT_ID}/${IMAGE_NAME_STAGE}:"v${env.BUILD_NUMBER}"
                        docker push ${REGISTRY_URI}/${PROJECT_ID}/${IMAGE_NAME_STAGE}:"latest"
                        """
                    }
                    }
                    post{
                        success{
                            echo "Build and Push Successfully"
                            }
                        failure{
                            echo "Build and Push Failed"
                            }
                    }

        }
        
        stage("Deploy to Staging"){
                steps {
                    /*sh """
                    kubectl delete -f 'devops/microservice-1/stage-test-cicd.yaml'
                    kubectl apply -f ''devops/microservice-1/stage-test-cicd.yaml''
                    """
                    */
                    // kubernetesDeploy kubeconfigId: 'airqo-k8s-config', configs: 'devops/microservice-1/stage-test-cicd.yaml', enableConfigSubstitution: true
                    withKubeConfig([credentialsId: 'airqo-k8s-config']) {
                        sh """
                        kubectl apply -f 'devops/microservice-1/stage-test-cicd.yaml'
                        """
                    }
                }
                post{
                    success{
                        echo "Successfully deployed to staging"
                    }
                    failure{
                        echo "Failed deploying to staging"
                    }
                }
            }
            stage('Final') {
                steps {
                    //webhook for your notification channel 
                    echo 'Service deployed successfully'
                    slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                }
            }
    }    
}